// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/garden"
	"github.com/cloudfoundry-incubator/garden-shed/layercake"
	"github.com/cloudfoundry-incubator/garden-shed/rootfs_provider"
	"github.com/pivotal-golang/lager"
)

type FakeMetricser struct {
	MetricsStub        func(logger lager.Logger, id layercake.ID) (garden.ContainerDiskStat, error)
	metricsMutex       sync.RWMutex
	metricsArgsForCall []struct {
		logger lager.Logger
		id     layercake.ID
	}
	metricsReturns struct {
		result1 garden.ContainerDiskStat
		result2 error
	}
}

func (fake *FakeMetricser) Metrics(logger lager.Logger, id layercake.ID) (garden.ContainerDiskStat, error) {
	fake.metricsMutex.Lock()
	fake.metricsArgsForCall = append(fake.metricsArgsForCall, struct {
		logger lager.Logger
		id     layercake.ID
	}{logger, id})
	fake.metricsMutex.Unlock()
	if fake.MetricsStub != nil {
		return fake.MetricsStub(logger, id)
	} else {
		return fake.metricsReturns.result1, fake.metricsReturns.result2
	}
}

func (fake *FakeMetricser) MetricsCallCount() int {
	fake.metricsMutex.RLock()
	defer fake.metricsMutex.RUnlock()
	return len(fake.metricsArgsForCall)
}

func (fake *FakeMetricser) MetricsArgsForCall(i int) (lager.Logger, layercake.ID) {
	fake.metricsMutex.RLock()
	defer fake.metricsMutex.RUnlock()
	return fake.metricsArgsForCall[i].logger, fake.metricsArgsForCall[i].id
}

func (fake *FakeMetricser) MetricsReturns(result1 garden.ContainerDiskStat, result2 error) {
	fake.MetricsStub = nil
	fake.metricsReturns = struct {
		result1 garden.ContainerDiskStat
		result2 error
	}{result1, result2}
}

var _ rootfs_provider.Metricser = new(FakeMetricser)
