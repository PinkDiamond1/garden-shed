// This file was generated by counterfeiter
package fake_rootfs_provider

import (
	"sync"

	"github.com/cloudfoundry-incubator/garden-shed/layercake"
	"github.com/cloudfoundry-incubator/garden-shed/rootfs_provider"
)

type FakeRootFSProvider struct {
	CreateStub        func(id string, spec rootfs_provider.Spec) (mountpoint string, envvar []string, err error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		id   string
		spec rootfs_provider.Spec
	}
	createReturns struct {
		result1 string
		result2 []string
		result3 error
	}
	RemoveStub        func(id layercake.ID) error
	removeMutex       sync.RWMutex
	removeArgsForCall []struct {
		id layercake.ID
	}
	removeReturns struct {
		result1 error
	}
}

func (fake *FakeRootFSProvider) Create(id string, spec rootfs_provider.Spec) (mountpoint string, envvar []string, err error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		id   string
		spec rootfs_provider.Spec
	}{id, spec})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(id, spec)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2, fake.createReturns.result3
	}
}

func (fake *FakeRootFSProvider) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeRootFSProvider) CreateArgsForCall(i int) (string, rootfs_provider.Spec) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].id, fake.createArgsForCall[i].spec
}

func (fake *FakeRootFSProvider) CreateReturns(result1 string, result2 []string, result3 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 string
		result2 []string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRootFSProvider) Remove(id layercake.ID) error {
	fake.removeMutex.Lock()
	fake.removeArgsForCall = append(fake.removeArgsForCall, struct {
		id layercake.ID
	}{id})
	fake.removeMutex.Unlock()
	if fake.RemoveStub != nil {
		return fake.RemoveStub(id)
	} else {
		return fake.removeReturns.result1
	}
}

func (fake *FakeRootFSProvider) RemoveCallCount() int {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return len(fake.removeArgsForCall)
}

func (fake *FakeRootFSProvider) RemoveArgsForCall(i int) layercake.ID {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return fake.removeArgsForCall[i].id
}

func (fake *FakeRootFSProvider) RemoveReturns(result1 error) {
	fake.RemoveStub = nil
	fake.removeReturns = struct {
		result1 error
	}{result1}
}

var _ rootfs_provider.RootFSProvider = new(FakeRootFSProvider)
