// This file was generated by counterfeiter
package fake_namespacer

import (
	"sync"

	"code.cloudfoundry.org/garden-shed/rootfs_provider"
	"code.cloudfoundry.org/lager"
)

type FakeNamespacer struct {
	CacheKeyStub        func() string
	cacheKeyMutex       sync.RWMutex
	cacheKeyArgsForCall []struct{}
	cacheKeyReturns     struct {
		result1 string
	}
	cacheKeyReturnsOnCall map[int]struct {
		result1 string
	}
	NamespaceStub        func(log lager.Logger, rootfsPath string) error
	namespaceMutex       sync.RWMutex
	namespaceArgsForCall []struct {
		log        lager.Logger
		rootfsPath string
	}
	namespaceReturns struct {
		result1 error
	}
	namespaceReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNamespacer) CacheKey() string {
	fake.cacheKeyMutex.Lock()
	ret, specificReturn := fake.cacheKeyReturnsOnCall[len(fake.cacheKeyArgsForCall)]
	fake.cacheKeyArgsForCall = append(fake.cacheKeyArgsForCall, struct{}{})
	fake.recordInvocation("CacheKey", []interface{}{})
	fake.cacheKeyMutex.Unlock()
	if fake.CacheKeyStub != nil {
		return fake.CacheKeyStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cacheKeyReturns.result1
}

func (fake *FakeNamespacer) CacheKeyCallCount() int {
	fake.cacheKeyMutex.RLock()
	defer fake.cacheKeyMutex.RUnlock()
	return len(fake.cacheKeyArgsForCall)
}

func (fake *FakeNamespacer) CacheKeyReturns(result1 string) {
	fake.CacheKeyStub = nil
	fake.cacheKeyReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeNamespacer) CacheKeyReturnsOnCall(i int, result1 string) {
	fake.CacheKeyStub = nil
	if fake.cacheKeyReturnsOnCall == nil {
		fake.cacheKeyReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.cacheKeyReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeNamespacer) Namespace(log lager.Logger, rootfsPath string) error {
	fake.namespaceMutex.Lock()
	ret, specificReturn := fake.namespaceReturnsOnCall[len(fake.namespaceArgsForCall)]
	fake.namespaceArgsForCall = append(fake.namespaceArgsForCall, struct {
		log        lager.Logger
		rootfsPath string
	}{log, rootfsPath})
	fake.recordInvocation("Namespace", []interface{}{log, rootfsPath})
	fake.namespaceMutex.Unlock()
	if fake.NamespaceStub != nil {
		return fake.NamespaceStub(log, rootfsPath)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.namespaceReturns.result1
}

func (fake *FakeNamespacer) NamespaceCallCount() int {
	fake.namespaceMutex.RLock()
	defer fake.namespaceMutex.RUnlock()
	return len(fake.namespaceArgsForCall)
}

func (fake *FakeNamespacer) NamespaceArgsForCall(i int) (lager.Logger, string) {
	fake.namespaceMutex.RLock()
	defer fake.namespaceMutex.RUnlock()
	return fake.namespaceArgsForCall[i].log, fake.namespaceArgsForCall[i].rootfsPath
}

func (fake *FakeNamespacer) NamespaceReturns(result1 error) {
	fake.NamespaceStub = nil
	fake.namespaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNamespacer) NamespaceReturnsOnCall(i int, result1 error) {
	fake.NamespaceStub = nil
	if fake.namespaceReturnsOnCall == nil {
		fake.namespaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.namespaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNamespacer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cacheKeyMutex.RLock()
	defer fake.cacheKeyMutex.RUnlock()
	fake.namespaceMutex.RLock()
	defer fake.namespaceMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeNamespacer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rootfs_provider.Namespacer = new(FakeNamespacer)
