// This file was generated by counterfeiter
package cleanerfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/garden-shed/layercake"
	"github.com/cloudfoundry-incubator/garden-shed/layercake/cleaner"
	"github.com/pivotal-golang/lager"
)

type FakeThreshold struct {
	ExceededStub        func(log lager.Logger, cake layercake.Cake) bool
	exceededMutex       sync.RWMutex
	exceededArgsForCall []struct {
		log  lager.Logger
		cake layercake.Cake
	}
	exceededReturns struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeThreshold) Exceeded(log lager.Logger, cake layercake.Cake) bool {
	fake.exceededMutex.Lock()
	fake.exceededArgsForCall = append(fake.exceededArgsForCall, struct {
		log  lager.Logger
		cake layercake.Cake
	}{log, cake})
	fake.recordInvocation("Exceeded", []interface{}{log, cake})
	fake.exceededMutex.Unlock()
	if fake.ExceededStub != nil {
		return fake.ExceededStub(log, cake)
	} else {
		return fake.exceededReturns.result1
	}
}

func (fake *FakeThreshold) ExceededCallCount() int {
	fake.exceededMutex.RLock()
	defer fake.exceededMutex.RUnlock()
	return len(fake.exceededArgsForCall)
}

func (fake *FakeThreshold) ExceededArgsForCall(i int) (lager.Logger, layercake.Cake) {
	fake.exceededMutex.RLock()
	defer fake.exceededMutex.RUnlock()
	return fake.exceededArgsForCall[i].log, fake.exceededArgsForCall[i].cake
}

func (fake *FakeThreshold) ExceededReturns(result1 bool) {
	fake.ExceededStub = nil
	fake.exceededReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeThreshold) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.exceededMutex.RLock()
	defer fake.exceededMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeThreshold) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cleaner.Threshold = new(FakeThreshold)
