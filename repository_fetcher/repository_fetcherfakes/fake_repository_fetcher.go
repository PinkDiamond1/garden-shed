// This file was generated by counterfeiter
package repository_fetcherfakes

import (
	"net/url"
	"sync"

	"code.cloudfoundry.org/garden-shed/layercake"
	"code.cloudfoundry.org/garden-shed/repository_fetcher"
	"code.cloudfoundry.org/lager"
)

type FakeRepositoryFetcher struct {
	FetchStub        func(log lager.Logger, u *url.URL, username, password string, diskQuota int64) (*repository_fetcher.Image, error)
	fetchMutex       sync.RWMutex
	fetchArgsForCall []struct {
		log       lager.Logger
		u         *url.URL
		username  string
		password  string
		diskQuota int64
	}
	fetchReturns struct {
		result1 *repository_fetcher.Image
		result2 error
	}
	fetchReturnsOnCall map[int]struct {
		result1 *repository_fetcher.Image
		result2 error
	}
	FetchIDStub        func(log lager.Logger, u *url.URL) (layercake.ID, error)
	fetchIDMutex       sync.RWMutex
	fetchIDArgsForCall []struct {
		log lager.Logger
		u   *url.URL
	}
	fetchIDReturns struct {
		result1 layercake.ID
		result2 error
	}
	fetchIDReturnsOnCall map[int]struct {
		result1 layercake.ID
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepositoryFetcher) Fetch(log lager.Logger, u *url.URL, username string, password string, diskQuota int64) (*repository_fetcher.Image, error) {
	fake.fetchMutex.Lock()
	ret, specificReturn := fake.fetchReturnsOnCall[len(fake.fetchArgsForCall)]
	fake.fetchArgsForCall = append(fake.fetchArgsForCall, struct {
		log       lager.Logger
		u         *url.URL
		username  string
		password  string
		diskQuota int64
	}{log, u, username, password, diskQuota})
	fake.recordInvocation("Fetch", []interface{}{log, u, username, password, diskQuota})
	fake.fetchMutex.Unlock()
	if fake.FetchStub != nil {
		return fake.FetchStub(log, u, username, password, diskQuota)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.fetchReturns.result1, fake.fetchReturns.result2
}

func (fake *FakeRepositoryFetcher) FetchCallCount() int {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return len(fake.fetchArgsForCall)
}

func (fake *FakeRepositoryFetcher) FetchArgsForCall(i int) (lager.Logger, *url.URL, string, string, int64) {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return fake.fetchArgsForCall[i].log, fake.fetchArgsForCall[i].u, fake.fetchArgsForCall[i].username, fake.fetchArgsForCall[i].password, fake.fetchArgsForCall[i].diskQuota
}

func (fake *FakeRepositoryFetcher) FetchReturns(result1 *repository_fetcher.Image, result2 error) {
	fake.FetchStub = nil
	fake.fetchReturns = struct {
		result1 *repository_fetcher.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeRepositoryFetcher) FetchReturnsOnCall(i int, result1 *repository_fetcher.Image, result2 error) {
	fake.FetchStub = nil
	if fake.fetchReturnsOnCall == nil {
		fake.fetchReturnsOnCall = make(map[int]struct {
			result1 *repository_fetcher.Image
			result2 error
		})
	}
	fake.fetchReturnsOnCall[i] = struct {
		result1 *repository_fetcher.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeRepositoryFetcher) FetchID(log lager.Logger, u *url.URL) (layercake.ID, error) {
	fake.fetchIDMutex.Lock()
	ret, specificReturn := fake.fetchIDReturnsOnCall[len(fake.fetchIDArgsForCall)]
	fake.fetchIDArgsForCall = append(fake.fetchIDArgsForCall, struct {
		log lager.Logger
		u   *url.URL
	}{log, u})
	fake.recordInvocation("FetchID", []interface{}{log, u})
	fake.fetchIDMutex.Unlock()
	if fake.FetchIDStub != nil {
		return fake.FetchIDStub(log, u)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.fetchIDReturns.result1, fake.fetchIDReturns.result2
}

func (fake *FakeRepositoryFetcher) FetchIDCallCount() int {
	fake.fetchIDMutex.RLock()
	defer fake.fetchIDMutex.RUnlock()
	return len(fake.fetchIDArgsForCall)
}

func (fake *FakeRepositoryFetcher) FetchIDArgsForCall(i int) (lager.Logger, *url.URL) {
	fake.fetchIDMutex.RLock()
	defer fake.fetchIDMutex.RUnlock()
	return fake.fetchIDArgsForCall[i].log, fake.fetchIDArgsForCall[i].u
}

func (fake *FakeRepositoryFetcher) FetchIDReturns(result1 layercake.ID, result2 error) {
	fake.FetchIDStub = nil
	fake.fetchIDReturns = struct {
		result1 layercake.ID
		result2 error
	}{result1, result2}
}

func (fake *FakeRepositoryFetcher) FetchIDReturnsOnCall(i int, result1 layercake.ID, result2 error) {
	fake.FetchIDStub = nil
	if fake.fetchIDReturnsOnCall == nil {
		fake.fetchIDReturnsOnCall = make(map[int]struct {
			result1 layercake.ID
			result2 error
		})
	}
	fake.fetchIDReturnsOnCall[i] = struct {
		result1 layercake.ID
		result2 error
	}{result1, result2}
}

func (fake *FakeRepositoryFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	fake.fetchIDMutex.RLock()
	defer fake.fetchIDMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRepositoryFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository_fetcher.RepositoryFetcher = new(FakeRepositoryFetcher)
