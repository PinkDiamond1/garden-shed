// This file was generated by counterfeiter
package fake_lock

import (
	"sync"

	"github.com/cloudfoundry-incubator/garden-linux/shed/repository_fetcher"
)

type FakeLock struct {
	AcquireStub        func(key string)
	acquireMutex       sync.RWMutex
	acquireArgsForCall []struct {
		key string
	}
	ReleaseStub        func(key string) error
	releaseMutex       sync.RWMutex
	releaseArgsForCall []struct {
		key string
	}
	releaseReturns struct {
		result1 error
	}
}

func (fake *FakeLock) Acquire(key string) {
	fake.acquireMutex.Lock()
	fake.acquireArgsForCall = append(fake.acquireArgsForCall, struct {
		key string
	}{key})
	fake.acquireMutex.Unlock()
	if fake.AcquireStub != nil {
		fake.AcquireStub(key)
	}
}

func (fake *FakeLock) AcquireCallCount() int {
	fake.acquireMutex.RLock()
	defer fake.acquireMutex.RUnlock()
	return len(fake.acquireArgsForCall)
}

func (fake *FakeLock) AcquireArgsForCall(i int) string {
	fake.acquireMutex.RLock()
	defer fake.acquireMutex.RUnlock()
	return fake.acquireArgsForCall[i].key
}

func (fake *FakeLock) Release(key string) error {
	fake.releaseMutex.Lock()
	fake.releaseArgsForCall = append(fake.releaseArgsForCall, struct {
		key string
	}{key})
	fake.releaseMutex.Unlock()
	if fake.ReleaseStub != nil {
		return fake.ReleaseStub(key)
	} else {
		return fake.releaseReturns.result1
	}
}

func (fake *FakeLock) ReleaseCallCount() int {
	fake.releaseMutex.RLock()
	defer fake.releaseMutex.RUnlock()
	return len(fake.releaseArgsForCall)
}

func (fake *FakeLock) ReleaseArgsForCall(i int) string {
	fake.releaseMutex.RLock()
	defer fake.releaseMutex.RUnlock()
	return fake.releaseArgsForCall[i].key
}

func (fake *FakeLock) ReleaseReturns(result1 error) {
	fake.ReleaseStub = nil
	fake.releaseReturns = struct {
		result1 error
	}{result1}
}

var _ repository_fetcher.Lock = new(FakeLock)
