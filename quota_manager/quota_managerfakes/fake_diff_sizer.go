// This file was generated by counterfeiter
package quota_managerfakes

import (
	"sync"

	"code.cloudfoundry.org/garden-shed/quota_manager"
	"code.cloudfoundry.org/lager"
)

type FakeDiffSizer struct {
	DiffSizeStub        func(logger lager.Logger, loopdevPath string) (uint64, error)
	diffSizeMutex       sync.RWMutex
	diffSizeArgsForCall []struct {
		logger      lager.Logger
		loopdevPath string
	}
	diffSizeReturns struct {
		result1 uint64
		result2 error
	}
	diffSizeReturnsOnCall map[int]struct {
		result1 uint64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDiffSizer) DiffSize(logger lager.Logger, loopdevPath string) (uint64, error) {
	fake.diffSizeMutex.Lock()
	ret, specificReturn := fake.diffSizeReturnsOnCall[len(fake.diffSizeArgsForCall)]
	fake.diffSizeArgsForCall = append(fake.diffSizeArgsForCall, struct {
		logger      lager.Logger
		loopdevPath string
	}{logger, loopdevPath})
	fake.recordInvocation("DiffSize", []interface{}{logger, loopdevPath})
	fake.diffSizeMutex.Unlock()
	if fake.DiffSizeStub != nil {
		return fake.DiffSizeStub(logger, loopdevPath)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.diffSizeReturns.result1, fake.diffSizeReturns.result2
}

func (fake *FakeDiffSizer) DiffSizeCallCount() int {
	fake.diffSizeMutex.RLock()
	defer fake.diffSizeMutex.RUnlock()
	return len(fake.diffSizeArgsForCall)
}

func (fake *FakeDiffSizer) DiffSizeArgsForCall(i int) (lager.Logger, string) {
	fake.diffSizeMutex.RLock()
	defer fake.diffSizeMutex.RUnlock()
	return fake.diffSizeArgsForCall[i].logger, fake.diffSizeArgsForCall[i].loopdevPath
}

func (fake *FakeDiffSizer) DiffSizeReturns(result1 uint64, result2 error) {
	fake.DiffSizeStub = nil
	fake.diffSizeReturns = struct {
		result1 uint64
		result2 error
	}{result1, result2}
}

func (fake *FakeDiffSizer) DiffSizeReturnsOnCall(i int, result1 uint64, result2 error) {
	fake.DiffSizeStub = nil
	if fake.diffSizeReturnsOnCall == nil {
		fake.diffSizeReturnsOnCall = make(map[int]struct {
			result1 uint64
			result2 error
		})
	}
	fake.diffSizeReturnsOnCall[i] = struct {
		result1 uint64
		result2 error
	}{result1, result2}
}

func (fake *FakeDiffSizer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.diffSizeMutex.RLock()
	defer fake.diffSizeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDiffSizer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ quota_manager.DiffSizer = new(FakeDiffSizer)
